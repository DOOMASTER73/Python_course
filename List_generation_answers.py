#Valeriia Marynchenko
#Генератори списків. Багатовимірні списки.
#Приклад
#Уявіть, що Ви розробляєте програмне забезпечення автоматичної метеостанції. Прилад фіксує температуру 
#повітря щогодини та робить це протягом місяця. Це дає Вам загалом 24 × 31 = 744 значення. Спробуємо 
#скласти список, здатний зберігати ці результати.
#--------------------------------------------------------------------
temps = [[0.0 for h in range(24)] for d in range(31)]
# print(temps)
#Визначимо середньомісячну полуденну температуру. Складіть усі 31 покази, записані опівдні, та поділіть 
#отриману суму на 31. Ви можете припустити, що спочатку зберігається північна температура. 
#Ось відповідний код:

temps = [[0.0 for h in range(24)] for d in range(31)]
#
# The matrix is magically updated here.
#

total = 0.0

for day in temps:
    total += day[11]

average = total / 31

print("Average temperature at noon:", average)

#--------------------------------------------------------------------
# Завдання 1
# Потрібно створити список імен, які починаються на певну літеру(наприклад, "С") зі списку імен.
# Для визначення початку можна застосувати атрибут ".startswith()".

#--------------------------------------------------------------------
names = ["Alice", "Bob", "Charlie", "David", "Eve", "Frank"]
letter = "C"
names_starting_with_c = [name for name in names if name.startswith(letter)]

#--------------------------------------------------------------------

#Завдання 2
#Напишіть код, використоувуючи генератори списків, який створює матрицю 8х8 з пустими клітинками 
# (пуста клітинка задається як "_") для задання шахівниці і розставте чотири тури(тура задається як"І") 
# по кутках шахівниці

#--------------------------------------------------------------------

# Створення шахівниці 8х8 з пустими клітинками
chessboard = [['_'] * 8 for _ in range(8)]

# Розстановка чотирьох тур по кутках шахівниці
chessboard[0][0] = 'I'  # Ліва верхня клітинка
chessboard[0][7] = 'I'  # Права верхня клітинка
chessboard[7][0] = 'I'  # Ліва нижня клітинка
chessboard[7][7] = 'I'  # Права нижня клітинка

# Виведення шахівниці
for row in chessboard:
    print(' '.join(row))


#Завдання 3

#Дано функцію `is_prime` як вона функціонує поки що розбирати непотрібно. Дана функція визначає прості 
# числа(ті, які націло діляться тільки на 1 і на себе). Ваша задача написати генератор списку для 
# заповнення його простими числами на проміжку від 1 до 100 включно.

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

prime_numbers = [x for x in range(1, 101) if is_prime(x)]

print(prime_numbers)
